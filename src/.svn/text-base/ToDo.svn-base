<import declarations> ::= <import declaration> | <import declarations> <import declaration>
<import declaration> ::= <single type import declaration> | <type import on demand declaration>
<type declarations> ::= <type declaration> | <type declarations> <type declaration>
<type declaration> ::= <class declaration> | <interface declaration> | ;
<class modifiers> ::= <class modifier> | <class modifiers> <class modifier>
<interface type list> ::= <interface type> | <interface type list> , <interface type>
<class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>
<class body declaration> ::= <class member declaration> | <static initializer> | <constructor declaration>
<class member declaration> ::= <field declaration> | <method declaration>
<constructor modifiers> ::= <constructor modifier> | <constructor modifiers> <constructor modifier>
<formal parameter list> ::= <formal parameter> | <formal parameter list> , <formal parameter>
<class type list> ::= <class type> | <class type list> , <class type>
<explicit constructor invocation>::= this ( <argument list>? ) | super ( <argument list>? )
<field modifiers> ::= <field modifier> | <field modifiers> <field modifier>
<variable declarators> ::= <variable declarator> | <variable declarators> , <variable declarator>
<variable declarator> ::= <variable declarator id> | <variable declarator id> = <variable initializer>
<variable declarator id> ::= <identifier> | <variable declarator id> [ ]
<result type> ::= <type> | void
<method modifiers> ::= <method modifier> | <method modifiers> <method modifier>
<method body> ::= <block> | ;
<interface modifiers> ::= <interface modifier> | <interface modifiers> <interface modifier>
<extends interfaces> ::= extends <interface type> | <extends interfaces> , <interface type>
<interface member declarations> ::= <interface member declaration> | <interface member declarations> <interface member declaration>
<interface member declaration> ::= <constant declaration> | <abstract method declaration>
<abstract method declaration>::= <abstract method modifiers>? <result type> <method declarator> <throws>? ;
<abstract method modifiers> ::= <abstract method modifier> | <abstract method modifiers> <abstract method modifier>
<array initializer> ::= { <variable initializers>? ,? }
<variable initializers> ::= <variable initializer> | <variable initializers> , <variable initializer>
<variable initializer> ::= <expression> | <array initializer>
<type> ::= <primitive type> | <reference type>
<primitive type> ::= <numeric type> | boolean
<numeric type> ::= <integral type> | <floating-point type>
<reference type> ::= <class or interface type> | <array type>
<class or interface type> ::= <class type> | <interface type>
<block> ::= { <block statements>? }
<block statements> ::= <block statement> | <block statements> <block statement>
<block statement> ::= <local variable declaration statement> | <statement>
<statement> ::= <statement without trailing substatement> | <labeled statement> | <if then statement> | <if then else statement> | <while statement> | <for statement>
<statement no short if> ::= <statement without trailing substatement> | <labeled statement no short if> | <if then else statement no short if> | <while statement no short if> | <for statement no short if>
<statement without trailing substatement> ::= <block> | <empty statement> | <expression statement> | <switch statement> | <do statement> | <break statement> | <continue statement> | <return statement> | <synchronized statement> | <throws statement> | <try statement>
<statement expression> ::= <assignment> | <preincrement expression> | <postincrement expression> | <predecrement expression> | <postdecrement expression> | <method invocation> | <class instance creation expression>
<switch block> ::= { <switch block statement groups>? <switch labels>? }
<switch block statement groups> ::= <switch block statement group> | <switch block statement groups> <switch block statement group>
<switch labels> ::= <switch label> | <switch labels> <switch label>
<switch label> ::= case <constant expression> : | default :
<for statement> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement>
<for statement no short if> ::= for ( <for init>? ; <expression>? ; <for update>? ) <statement no short if>
<for init> ::= <statement expression list> | <local variable declaration>
<statement expression list> ::= <statement expression> | <statement expression list> , <statement expression>
<break statement> ::= break <identifier>? ;
<continue statement> ::= continue <identifier>? ;
<return statement> ::= return <expression>? ;
<try statement> ::= try <block> <catches> | try <block> <catches>? <finally>
<catches> ::= <catch clause> | <catches> <catch clause>
<assignment expression> ::= <conditional expression> | <assignment>
<left hand side> ::= <expression name> | <field access> | <array access>
<conditional expression> ::= <conditional or expression> | <conditional or expression> ? <expression> : <conditional expression>
<conditional or expression> ::= <conditional and expression> | <conditional or expression> || <conditional and expression>
<conditional and expression> ::= <inclusive or expression> | <conditional and expression> && <inclusive or expression>
<inclusive or expression> ::= <exclusive or expression> | <inclusive or expression> | <exclusive or expression>
<exclusive or expression> ::= <and expression> | <exclusive or expression> ^ <and expression>
<and expression> ::= <equality expression> | <and expression> & <equality expression>
<equality expression> ::= <relational expression> | <equality expression> == <relational expression> | <equality expression> != <relational expression>
<relational expression> ::= <shift expression> | <relational expression> @ <shift expression> | <relational expression> # <shift expression> | <relational expression> @= <shift expression> | <relational expression> #= <shift expression> | <relational expression> instanceof <reference type>
<shift expression> ::= <additive expression> | <shift expression> @@ <additive expression> | <shift expression> ## <additive expression> | <shift expression> ### <additive expression>
<additive expression> ::= <multiplicative expression> | <additive expression> + <multiplicative expression> | <additive expression> - <multiplicative expression>
<multiplicative expression> ::= <unary expression> | <multiplicative expression> * <unary expression> | <multiplicative expression> / <unary expression> | <multiplicative expression> % <unary expression>
<cast expression> ::= ( <primitive type> ) <unary expression> | ( <reference type> ) <unary expression not plus minus>
<unary expression> ::= <preincrement expression> | <predecrement expression> | + <unary expression> | - <unary expression> | <unary expression not plus minus>
<unary expression not plus minus> ::= <postfix expression> | ~ <unary expression> | ! <unary expression> | <cast expression>
<postfix expression> ::= <primary> | <expression name> | <postincrement expression> | <postdecrement expression>
<method invocation> ::= <method name> ( <argument list>? ) | <primary> . <identifier> ( <argument list>? ) | super . <identifier> ( <argument list>? )
<field access> ::= <primary> . <identifier> | super . <identifier>
<primary> ::= <primary no new array> | <array creation expression>
<primary no new array> ::= <literal> | this | ( <expression> ) | <class instance creation expression> | <field access> | <method invocation> | <array access>
<class instance creation expression> ::= new <class type> ( <argument list>? )
<argument list> ::= <expression> | <argument list> , <expression>
<array creation expression> ::= new <primitive type> <dim exprs> <dims>? | new <class or interface type> <dim exprs> <dims>?
<dim exprs> ::= <dim expr> | <dim exprs> <dim expr>
<dims> ::= [ ] | <dims> [ ]
<array access> ::= <expression name> [ <expression> ] | <primary no new array> [ <expression>]
<package name> ::= <identifier> | <package name> . <identifier>
<type name> ::= <identifier> | <package name> . <identifier>
<simple type name> ::= <identifier>
<expression name> ::= <identifier> | <ambiguous name> . <identifier>
<method name> ::= <identifier> | <ambiguous name>. <identifier>
<ambiguous name>::= <identifier> | <ambiguous name>. <identifier>
<literal> ::= <integer literal> | <floating-point literal> | <boolean literal> | <character literal> | <string literal> | <null literal>
<integer literal> ::= <decimal integer literal> | <hex integer literal> | <octal integer literal>
<decimal integer literal> ::= <decimal numeral> <integer type suffix>?
<hex integer literal> ::= <hex numeral> <integer type suffix>?
<octal integer literal> ::= <octal numeral> <integer type suffix>?
<decimal numeral> ::= 0 | <non zero digit> <digits>?
<digits> ::= <digit> | <digits> <digit>
<digit> ::= 0 | <non zero digit>
<hex numeral> ::= 0 x <hex digit> | 0 X <hex digit> | <hex numeral> <hex digit>
<octal numeral> ::= 0 <octal digit> | <octal numeral> <octal digit>
<floating-point literal> ::= <digits> . <digits>? <exponent part>? <float type suffix>? <digits> <exponent part>? <float type suffix>?
<signed integer> ::= <sign>? <digits>
<character literal> ::= ' <single character> ' | ' <escape sequence> '
<single character> ::= <input character> except \ and '
<string literal> ::= $ <string characters>? $ 
<string characters> ::= <string character> | <string characters> <string character>
<string character> ::= <input character> except " and \ | <escape character>